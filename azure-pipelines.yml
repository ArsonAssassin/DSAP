trigger: none

#pool:
  #name: 'Default'

parameters:
  - name: versionIncrement
    type: string
    default: 'patch'
    values:
    - patch
    - minor
    - major

variables:
  solution: '**/source/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build_And_Package
  jobs:
  - job: Create_ApWorld_Package
    steps:
    - checkout: self
      
    - task: PowerShell@2
      name: FindSourceDirectory
      inputs:
        targetType: 'inline'
        script: |
          $sourceDir = Get-ChildItem -Path "$(Build.SourcesDirectory)/apworld" -Directory | Select-Object -First 1
          if ($sourceDir) {
            $folderName = $sourceDir.Name
            Write-Host "Found source directory: $folderName"
            Write-Host "##vso[task.setvariable variable=folderName;isOutput=true]$folderName"
            Write-Host "##vso[task.setvariable variable=sourcePath]$($sourceDir.FullName)"
          } else {
            Write-Error "No directory found in apworld folder"
            exit 1
          }

    - task: PowerShell@2
      name: CleanAndPackage
      inputs:
        targetType: 'inline'
        script: |
          # Remove __pycache__ directories
          Get-ChildItem -Path "$(sourcePath)" -Filter "__pycache__" -Recurse | Remove-Item -Force -Recurse
          
          # Create zip file
          $folderName = "$(FindSourceDirectory.folderName)"
          $tempZipPath = "$(Build.ArtifactStagingDirectory)/$folderName.zip"
          $finalPath = "$(Build.ArtifactStagingDirectory)/$folderName.apworld"
          
          # Create the zip file first
          Compress-Archive -Path "$(sourcePath)/*" -DestinationPath $tempZipPath
          
          # Rename to .apworld
          Move-Item -Path $tempZipPath -Destination $finalPath -Force

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: ApWorldRelease

  - job: Build_And_Package_App
    dependsOn: Create_ApWorld_Package
    condition: succeeded('Create_ApWorld_Package')
    steps:
    - checkout: self

    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: PowerShell@2
      name: IncrementVersion
      inputs:
        targetType: 'inline'
        script: |
          # Get the client project file
          $csprojPath = Get-ChildItem -Path "$(Build.SourcesDirectory)/source" -Filter "*.csproj" -Recurse | Select-Object -First 1
          
          # Read current version
          [xml]$csproj = Get-Content $csprojPath
          $currentVersion = $csproj.Project.PropertyGroup.ApplicationVersion
          Write-Host "Current version: $currentVersion"
          
          # Parse version
          $versionParts = $currentVersion.Split('.')
          $major = [int]$versionParts[0]
          $minor = [int]$versionParts[1]
          $patch = [int]$versionParts[2]
          
          # Increment version
          switch ("${{ parameters.versionIncrement }}") {
            "major" {
              $major++
              $minor = 0
              $patch = 0
            }
            "minor" {
              $minor++
              $patch = 0
            }
            "patch" {
              $patch++
            }
          }
          
          $newVersion = "$major.$minor.$patch"
          Write-Host "New version: $newVersion"
          
          # Update both version properties
          $csproj.Project.PropertyGroup.ApplicationVersion = $newVersion
          $csproj.Project.PropertyGroup.ApplicationDisplayVersion = $newVersion
          $csproj.Save($csprojPath)
          
          # Set version for later tasks
          Write-Host "##vso[task.setvariable variable=newVersion]$newVersion"
    - task: PowerShell@2
      name: SetupGitHub
      inputs:
        targetType: 'inline'
        script: |
          git config --global user.email "azure-pipeline@your-domain.com"
          git config --global user.name "Azure Pipeline"
          
          # Use the GitHub service connection token
          $encodedPat = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$(GITHUB_PAT)"))
          git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic $encodedPat"
      env:
        GITHUB_PAT: $(ArsonAssassin.PAT)
    - task: PowerShell@2
      name: CommitVersionUpdate
      inputs:
        targetType: 'inline'
        script: |
          git add **/**.csproj
          git commit -m "Bump version to $(newVersion) [skip ci]"
          git tag -a "v$(newVersion)" -m "Version $(newVersion)"
          git push origin HEAD:$(Build.SourceBranch) --follow-tags
    - task: PowerShell@2
      name: GetProjectName
      inputs:
        targetType: 'inline'
        script: |
          $slnFile = Get-ChildItem -Path "$(Build.SourcesDirectory)/source" -Filter "*.sln" | Select-Object -First 1
          $projectName = [System.IO.Path]::GetFileNameWithoutExtension($slnFile.Name)
          Write-Host "Project name: $projectName"
          Write-Host "##vso[task.setvariable variable=projectName]$projectName"

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(solution)'
        arguments: '-f net8.0-windows10.0.19041.0 -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true /p:EnableCompressionInSingleFile=true /p:PublishAppxPackage=false'
        zipAfterPublish: false

    - task: PowerShell@2
      name: PackageApplication
      inputs:
        targetType: 'inline'
        script: |
          $publishDir = "bin/release/net8.0-windows10.0.19041.0/win-x64/publish"
          $files = Get-ChildItem -Path "$(Build.SourcesDirectory)/source/*/$publishDir" -Include "*.exe", "*.pdb"
          
          # Create directory for files
          New-Item -ItemType Directory -Path "$(Build.ArtifactStagingDirectory)/app" -Force
          
          # Copy files to staging directory
          Copy-Item -Path $files.FullName -Destination "$(Build.ArtifactStagingDirectory)/app"
          
          # Create zip file
          Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/app/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/$(projectName).zip"

    - publish: $(Build.ArtifactStagingDirectory)/$(projectName).zip
      artifact: ApplicationRelease